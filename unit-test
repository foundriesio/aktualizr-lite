#!/bin/bash -e

here=$(dirname $(readlink -f $0))
cd $here

if [ $# -eq 0 ] ; then
	echo "Launching unit tests in docker"
	TEST=1 exec ./dev-shell ./unit-test indocker
fi

set -x

build=$(mktemp -d)

cmake -S . -B $build -DCMAKE_BUILD_TYPE=Debug -GNinja -DBUILD_P11=ON
cmake --build $build --target aklite-tests

# do additional clang-tidying in the aktualizr way
clang_tests=$(ninja -C $build help | grep aktualizr_clang_tidy-src- | cut -d: -f1)
cmake --build $build --target $clang_tests


# do clang-formating in the aktualizr way
clang_tests=$(ninja -C $build help | grep aktualizr_ci_clang_format-src- | cut -d: -f1)
cmake --build $build --target $clang_tests

cd $build
ctest -j6 -V -L aklite

cmake -DCMAKE_BUILD_TYPE=Debug -GNinja -DBUILD_P11=ON -DBUILD_SERVER=ON $here
ninja t_apiserver
ctest -V -L apiserver

cd $here
rm -rf $build

build=$(mktemp -d)
cmake -S . -B $build -DCMAKE_BUILD_TYPE=Debug -GNinja -DBUILD_P11=ON -DBUILD_SOTA_TOOLS=ON
cmake --build $build --target all

if [[ ! -f $build/aktualizr/src/sota_tools/garage-sign/bin/garage-sign ]]; then
  echo "Failed to build garage-sign!"
  exit 1
fi
if [[ ! -f $build/aktualizr/src/sota_tools/garage-push ]]; then
  echo "Failed to build garage-push!"
  exit 1
fi

rm -rf $build
